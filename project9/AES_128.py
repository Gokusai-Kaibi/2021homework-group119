import time
#S盒
S_BOX = [
    [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76],
    [0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0],
    [0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15],
    [0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75],
    [0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84],
    [0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf],
    [0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8],
    [0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2],
    [0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73],
    [0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb],
    [0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79],
    [0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08],
    [0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a],
    [0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e],
    [0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf],
    [0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]
]
#轮常量，在密钥拓展方案中生成每一个轮密钥的第一列时要异或
RCON = [
    0x01, 0x00, 0x00, 0x00,
    0x02, 0x00, 0x00, 0x00,
    0x04, 0x00, 0x00, 0x00,
    0x08, 0x00, 0x00, 0x00,
    0x10, 0x00, 0x00, 0x00,
    0x20, 0x00, 0x00, 0x00,
    0x40, 0x00, 0x00, 0x00,
    0x80, 0x00, 0x00, 0x00,
    0x1b, 0x00, 0x00, 0x00,
    0x36, 0x00, 0x00, 0x00
]

"""
    AES-128密钥扩展算法
    :param key: 16字节的原始密钥
    :return: 176字节的扩展密钥
"""
def key_expansion(key_state):
    
    expanded_key = [0] * 176
    
    # 将原始密钥复制到扩展密钥的前16字节
    for i in range(4):
        for j in range(4):
            expanded_key[4*i+j] = key_state[i][j]
    
    # 生成其他的字节
    for i in range(16, 176):
        if i % 16 == 0:
            # 对前一个4字节进行处理
            temp = expanded_key[i-4:i]
            # 左移一位
            temp = temp[1:] + temp[:1]
            # 对每个字节进行S盒替换
            for j in range(4):
                temp[j] = S_BOX[temp[j] >> 4][temp[j] & 0x0f]
            # 异或上Rcon[i/16]
            temp[0] ^= RCON[i//16]
            # 将处理后的结果与前4字节异或，得到扩展密钥的当前4字节
            for j in range(4):
                expanded_key[i+j] = expanded_key[i-16+j] ^ temp[j]
        elif i % 16 == 4:
            # 对前一个4字节进行处理
            temp = expanded_key[i-4:i]
            # 对每个字节进行S盒替换
            for j in range(4):
                temp[j] = S_BOX[temp[j] >> 4][temp[j] & 0x0f]
            # 将处理后的结果与前4字节异或，得到扩展密钥的当前4字节
            for j in range(4):
                expanded_key[i+j] = expanded_key[i-16+j] ^ temp[j]
        else:
            # 对前一个4字节进行处理，直接异或得到扩展密钥的当前4字节
            expanded_key[i] = expanded_key[i-16] ^ expanded_key[i-4]
    
    return expanded_key
#将学号转为ascii码并补零
def text_to_matrix(text):
    matrix = []
    for i in range(0, 16, 4):
        #生成一个4*4的矩阵，每个元素表示一个8bit的二进制串，初始化为全0二进制位
        #实际上生成的是一个一维的矩阵，a[i+j]相当于matrix[i/4][j]
        row = [0] * 4
        for j in range(4):
            #对学号每一位分别计算ascii码，将每一位对应的8位二进制串放入矩阵合适位置中
            if i + j < len(text):
                row[j] = ord(text[i+j])
        matrix.append(row)
    return matrix
#加轮密钥（二维矩阵版本）
def add_round_key_first(state, key):
    for i in range(4):
        for j in range(4):
            #待加密文本和密钥异或
            state[i][j] ^= key[i][j]
    return state
#过S盒
def sub_bytes(state):
    for i in range(4):
        for j in range(4):
            '''
            设state[i][j]=0xst,s和t表示4位二进制串
            state[i][j] >> 4表示state[i][j]前4位对应的二进制串，即为s
            state[i][j] & 0x0f表示state[i][j]后4位对应的二进制串，即为t
            取S盒第s行第t列的数而代之
            '''
            state[i][j] = S_BOX[state[i][j] >> 4][state[i][j] & 0x0f]
    return state
#行变换
def shift_rows(state):
    for i in range(1, 4):
        #将行变换理解为拆开后拼接，从第i个数前断开，交换两部分顺序
        state[i] = state[i][i:] + state[i][:i]


# 列混合表
mix_table = [
    [0x02, 0x03, 0x01, 0x01],
    [0x01, 0x02, 0x03, 0x01],
    [0x01, 0x01, 0x02, 0x03],
    [0x03, 0x01, 0x01, 0x02]
]
#列混合表的逆
mix_table_inv = [
    [0x0e, 0x0b, 0x0d, 0x09],
    [0x09, 0x0e, 0x0b, 0x0d],
    [0x0d, 0x09, 0x0e, 0x0b],
    [0x0b, 0x0d, 0x09, 0x0e]
]
#列混合初始化
mix_columns_table = []
mix_columns_inv_table = []
#构造查找表
for i in range(256):
    mix_columns_table.append([])
    mix_columns_inv_table.append([])
    for j in range(4):
        #任意一个列向量
        s = i
        #进行与有限域乘法等价的算法，计算i经过列混合的结果
        x = s ^ mix_table[j][0]
        y = s ^ mix_table[j][1]
        z = s ^ mix_table[j][2]
        w = s ^ mix_table[j][3]
        #[y0, y1, y2, y3] = L(x0) ⊕ L(x1)>>> 8 ⊕ L(x2)>>>16 ⊕ L(x3) >>> 24（式1）
        #将计算结果存入查找表中
        mix_columns_table[i].append((x << 24) | (y << 16) | (z << 8) | w)

        s = i
        x = s ^ mix_table_inv[j][0]
        y = s ^ mix_table_inv[j][1]
        z = s ^ mix_table_inv[j][2]
        w = s ^ mix_table_inv[j][3]
        mix_columns_inv_table[i].append((x << 24) | (y << 16) | (z << 8) | w)


# 列混合操作，使用查找表
def mix_columns(state):
    for i in range(4):
        #取出列向量
        s0 = state[0][i]
        s1 = state[1][i]
        s2 = state[2][i]
        s3 = state[3][i]
        #查表进行列混合
        t0 = mix_columns_table[s0][0] ^ mix_columns_table[s1][1] ^ mix_columns_table[s2][2] ^ mix_columns_table[s3][3]
        t1 = mix_columns_table[s0][1] ^ mix_columns_table[s1][2] ^ mix_columns_table[s2][3] ^ mix_columns_table[s3][0]
        t2 = mix_columns_table[s0][2] ^ mix_columns_table[s1][3] ^ mix_columns_table[s2][0] ^ mix_columns_table[s3][1]
        t3 = mix_columns_table[s0][3] ^ mix_columns_table[s1][0] ^ mix_columns_table[s2][1] ^ mix_columns_table[s3][2]
        #由于列混合表中做出的值相较于式1左移了24位，因此此处右移回去，同时取后8位
        state[0][i] = (t0 >> 24) & 0xff
        state[1][i] = (t1 >> 24) & 0xff
        state[2][i] = (t2 >> 24) & 0xff
        state[3][i] = (t3 >> 24) & 0xff

#加轮密钥（一维矩阵版本）
def add_round_key(state, round_key):
    for i in range(4):
        for j in range(4):
            state[i][j] ^= round_key[i*4+j]


def encrypt(plaintext, key):
    #密钥拓展
    state= plaintext
    key_state=text_to_matrix(key)
    expanded_key=key_expansion(key_state)
    state=add_round_key_first(state, key_state)
    
    # 定义轮数
    NUM_ROUNDS = 10

    for i in range(1, NUM_ROUNDS):
        #S盒
        sub_bytes(state)
        #行变换
        shift_rows(state)
        #列混合
        mix_columns(state)
        #加轮密钥
        add_round_key(state, expanded_key[16*i:16*(i+1)])
        
    # 最终轮，只需三步
    sub_bytes(state)
    shift_rows(state)
    add_round_key(state, expanded_key[16*NUM_ROUNDS:])

    # 将加密后的4x4矩阵转化为密文
    ciphertext = []
    for i in range(4):
        for j in range(4):
            ciphertext.append(state[j][i])

    return bytes(ciphertext)

plain_text=[[[56, 146, 116, 175], [141, 181, 164, 144], [213, 94, 106, 64], [252, 128, 118, 2]],
[[57, 75, 23, 107], [54, 177, 33, 219], [125, 90, 234, 114], [30, 130, 141, 113]],
[[58, 168, 140, 184], [94, 217, 78, 175], [250, 191, 176, 148], [116, 29, 117, 229]],
[[59, 220, 16, 88], [70, 218, 242, 91], [129, 160, 127, 92], [203, 29, 54, 233]],
[[60, 73, 116, 2], [85, 210, 172, 26], [11, 247, 169, 38], [35, 64, 91, 163]],
[[61, 51, 185, 53], [136, 104, 173, 225], [42, 213, 178, 50], [93, 10, 229, 90]],
[[62, 220, 233, 119], [93, 235, 181, 105], [197, 58, 108, 147], [152, 13, 87, 235]],
[[63, 135, 154, 223], [4, 104, 178, 162], [213, 230, 164, 198], [188, 119, 95, 141]],
[[64, 195, 143, 214], [42, 33, 20, 169], [212, 4, 17, 1], [24, 141, 174, 187]],
[[65, 115, 28, 96], [202, 32, 207, 93], [214, 47, 69, 83], [41, 215, 168, 89]],
[[66, 204, 13, 234], [38, 237, 85, 78], [128, 132, 217, 43], [248, 55, 184, 237]],
[[67, 213, 122, 160], [92, 78, 250, 159], [33, 252, 60, 54], [133, 142, 129, 176]],
[[68, 125, 191, 238], [177, 228, 133, 233], [18, 7, 139, 198], [236, 102, 226, 163]],
[[69, 243, 185, 244], [144, 6, 50, 185], [244, 4, 2, 45], [44, 224, 30, 1]],
[[70, 116, 248, 67], [144, 11, 162, 55], [22, 146, 8, 83], [28, 181, 55, 62]],
[[71, 55, 14, 114], [251, 242, 70, 204], [38, 9, 126, 246], [122, 216, 237, 85]],
[[72, 151, 18, 202], [87, 2, 182, 108], [8, 110, 63, 176], [224, 58, 28, 155]],
[[73, 223, 58, 95], [64, 221, 186, 185], [228, 27, 192, 166], [97, 29, 146, 229]],
[[74, 200, 188, 120], [43, 74, 119, 195], [24, 89, 10, 14], [106, 10, 66, 196]],
[[75, 113, 190, 15], [227, 195, 1, 219], [255, 48, 178, 26], [137, 248, 101, 34]],
[[76, 81, 60, 5], [61, 74, 179, 190], [253, 141, 158, 25], [208, 161, 254, 105]],
[[77, 212, 250, 4], [103, 237, 191, 201], [25, 20, 209, 63], [248, 242, 8, 104]],
[[78, 81, 173, 192], [197, 236, 2, 148], [18, 236, 148, 105], [48, 246, 131, 175]],
[[79, 99, 149, 65], [227, 189, 221, 161], [88, 218, 79, 49], [56, 206, 253, 202]],
[[80, 197, 92, 239], [101, 229, 105, 196], [48, 222, 175, 156], [226, 94, 182, 54]],
[[81, 75, 190, 0], [86, 47, 135, 132], [106, 84, 54, 95], [108, 218, 60, 197]],
[[82, 10, 203, 73], [61, 5, 243, 202], [14, 215, 242, 177], [244, 152, 143, 116]],
[[83, 24, 34, 79], [88, 63, 116, 71], [239, 66, 84, 46], [223, 190, 57, 182]],
[[84, 230, 12, 103], [28, 27, 116, 92], [254, 119, 157, 107], [110, 147, 72, 167]],
[[85, 68, 179, 62], [2, 184, 4, 135], [182, 48, 34, 221], [228, 86, 221, 97]],
[[86, 123, 110, 61], [140, 92, 231, 196], [103, 188, 47, 242], [255, 201, 204, 15]],
[[87, 19, 144, 169], [36, 17, 30, 173], [75, 65, 229, 146], [40, 63, 98, 245]],
[[88, 184, 174, 253], [169, 73, 43, 49], [81, 202, 128, 236], [46, 69, 26, 57]],
[[89, 53, 170, 190], [28, 101, 206, 119], [189, 87, 179, 211], [201, 23, 10, 78]],
[[90, 22, 50, 246], [15, 134, 16, 19], [210, 45, 132, 183], [38, 182, 162, 120]],
[[91, 216, 2, 209], [238, 175, 19, 33], [186, 89, 41, 222], [198, 166, 42, 101]],
[[92, 207, 244, 71], [54, 33, 235, 221], [75, 162, 106, 153], [168, 18, 192, 224]],
[[93, 52, 145, 32], [110, 199, 98, 79], [61, 132, 238, 160], [168, 105, 12, 34]],
[[94, 208, 36, 127], [24, 63, 40, 192], [169, 203, 1, 255], [217, 189, 228, 100]],
[[95, 184, 51, 139], [154, 217, 195, 64], [142, 6, 97, 55], [116, 50, 131, 32]],
[[96, 12, 175, 131], [253, 35, 162, 68], [49, 92, 179, 24], [218, 48, 9, 225]],
[[97, 97, 52, 117], [119, 80, 154, 237], [74, 99, 251, 61], [73, 225, 84, 249]],
[[98, 2, 44, 78], [182, 10, 151, 194], [121, 159, 121, 124], [112, 140, 128, 63]],
[[99, 224, 77, 71], [10, 95, 116, 42], [154, 67, 75, 89], [48, 90, 187, 43]],
[[100, 148, 220, 108], [181, 90, 157, 46], [156, 100, 135, 152], [39, 168, 72, 238]],
[[101, 152, 51, 72], [72, 189, 110, 222], [241, 194, 161, 195], [14, 73, 181, 199]],
[[102, 128, 188, 62], [194, 11, 226, 185], [206, 183, 177, 17], [179, 118, 100, 105]],
[[103, 163, 8, 205], [21, 40, 28, 235], [233, 90, 184, 191], [183, 85, 218, 92]],
[[104, 19, 234, 96], [62, 89, 149, 37], [220, 242, 175, 109], [128, 210, 229, 131]],
[[105, 87, 69, 233], [160, 196, 236, 103], [15, 250, 2, 59], [143, 202, 228, 225]],
[[106, 249, 185, 209], [45, 34, 86, 238], [60, 3, 203, 141], [170, 23, 177, 174]],
[[107, 5, 5, 41], [198, 130, 127, 40], [192, 239, 106, 18], [66, 233, 63, 139]],
[[108, 49, 79, 177], [138, 119, 247, 144], [174, 4, 159, 237], [214, 18, 38, 127]],
[[109, 236, 174, 252], [69, 1, 116, 215], [109, 159, 154, 167], [117, 90, 48, 205]],
[[110, 144, 169, 165], [135, 75, 244, 142], [175, 112, 238, 163], [166, 42, 37, 10]],
[[111, 139, 107, 216], [217, 176, 139, 8], [214, 78, 50, 209], [129, 119, 119, 251]],
[[112, 84, 77, 73], [205, 73, 114, 14], [33, 157, 191, 139], [190, 211, 57, 4]],
[[113, 225, 253, 64], [164, 29, 55, 10], [31, 101, 116, 80], [149, 104, 125, 71]],
[[114, 186, 29, 54], [210, 52, 158, 35], [246, 68, 57, 44], [142, 169, 196, 157]],
[[115, 64, 193, 50], [113, 175, 242, 100], [208, 242, 72, 65], [214, 70, 95, 9]],
[[116, 150, 255, 132], [230, 95, 197, 23], [197, 62, 252, 51], [99, 195, 132, 146]],
[[117, 171, 8, 163], [170, 63, 240, 63], [28, 85, 173, 81], [79, 196, 133, 150]],
[[118, 88, 94, 213], [136, 30, 129, 86], [140, 187, 233, 159], [109, 37, 200, 235]],
[[119, 9, 13, 25], [29, 74, 7, 49], [1, 88, 236, 151], [213, 13, 124, 21]],
[[120, 8, 170, 72], [15, 65, 200, 208], [20, 163, 145, 232], [179, 80, 47, 96]],
[[121, 144, 43, 133], [227, 183, 227, 29], [32, 47, 45, 98], [40, 211, 80, 16]],
[[122, 23, 93, 231], [232, 247, 196, 226], [168, 225, 200, 207], [58, 101, 202, 88]],
[[123, 44, 45, 226], [12, 96, 220, 44], [98, 5, 60, 98], [250, 197, 153, 176]],
[[124, 39, 64, 104], [195, 171, 186, 45], [36, 193, 16, 155], [196, 97, 241, 252]],
[[125, 216, 191, 74], [211, 230, 21, 2], [192, 32, 162, 232], [165, 242, 242, 234]],
[[126, 7, 215, 97], [135, 183, 112, 219], [135, 177, 215, 229], [233, 68, 49, 225]],
[[127, 29, 115, 130], [141, 115, 156, 198], [206, 212, 87, 61], [172, 176, 161, 6]],
[[128, 157, 55, 58], [239, 6, 204, 75], [140, 255, 182, 76], [134, 87, 25, 37]],
[[129, 54, 215, 37], [147, 114, 203, 142], [206, 167, 191, 60], [105, 40, 135, 67]],
[[130, 121, 198, 130], [21, 249, 161, 31], [247, 109, 62, 159], [177, 198, 217, 29]],
[[131, 138, 134, 252], [204, 115, 36, 80], [129, 131, 178, 180], [113, 163, 189, 140]],
[[132, 59, 139, 117], [91, 41, 237, 13], [149, 178, 239, 101], [174, 68, 223, 231]],
[[133, 119, 65, 34], [175, 170, 72, 110], [238, 195, 181, 58], [144, 18, 107, 114]],
[[134, 28, 15, 209], [110, 220, 237, 26], [37, 63, 114, 202], [158, 123, 5, 117]],
[[135, 168, 118, 9], [202, 203, 231, 105], [209, 126, 184, 116], [113, 154, 176, 236]],
[[136, 53, 15, 78], [89, 80, 214, 248], [163, 222, 39, 85], [224, 108, 235, 247]],
[[137, 107, 187, 116], [61, 54, 193, 108], [119, 97, 241, 11], [76, 11, 188, 141]],
[[138, 89, 104, 88], [228, 27, 19, 192], [170, 15, 166, 252], [89, 23, 137, 162]],
[[139, 190, 32, 7], [157, 171, 2, 167], [45, 237, 167, 185], [47, 125, 112, 47]],
[[140, 159, 251, 212], [174, 91, 87, 75], [229, 41, 210, 106], [30, 252, 37, 79]],
[[141, 18, 115, 255], [63, 2, 163, 181], [142, 3, 22, 53], [191, 154, 19, 61]],
[[142, 237, 136, 32], [202, 106, 231, 198], [210, 165, 118, 148], [53, 81, 50, 103]],
[[143, 242, 195, 38], [232, 150, 156, 131], [85, 251, 169, 243], [133, 46, 7, 43]],
[[144, 38, 177, 139], [191, 74, 227, 96], [59, 34, 188, 242], [111, 8, 189, 11]],
[[145, 10, 195, 39], [60, 107, 7, 108], [127, 179, 60, 227], [26, 31, 128, 191]],
[[146, 199, 149, 239], [66, 17, 124, 34], [46, 1, 209, 245], [125, 250, 119, 142]],
[[147, 81, 226, 207], [155, 46, 130, 137], [218, 103, 48, 186], [223, 214, 171, 46]],
[[148, 18, 208, 70], [255, 247, 88, 73], [102, 178, 147, 148], [210, 202, 125, 133]],
[[149, 55, 45, 217], [28, 169, 116, 110], [93, 41, 105, 112], [246, 191, 198, 61]],
[[150, 34, 201, 64], [74, 205, 146, 196], [92, 249, 38, 1], [251, 96, 101, 38]],
[[151, 35, 91, 87], [237, 62, 2, 191], [216, 79, 149, 243], [186, 112, 27, 234]],
[[152, 122, 126, 72], [151, 20, 19, 164], [117, 224, 180, 234], [100, 23, 76, 174]],
[[153, 179, 147, 217], [67, 126, 214, 102], [220, 58, 78, 57], [241, 142, 216, 77]],
[[154, 229, 100, 130], [3, 229, 65, 149], [20, 19, 209, 211], [202, 228, 199, 253]],
[[155, 112, 198, 228], [152, 7, 7, 84], [241, 58, 242, 65], [95, 148, 59, 163]],
[[156, 200, 241, 157], [85, 102, 50, 193], [110, 203, 53, 98], [206, 35, 5, 175]],
[[157, 247, 186, 77], [240, 31, 190, 19], [109, 131, 69, 162], [139, 253, 145, 200]],
[[158, 57, 217, 147], [66, 138, 229, 175], [117, 163, 199, 191], [95, 216, 147, 90]],
[[159, 204, 18, 157], [86, 205, 116, 140], [139, 102, 62, 176], [218, 135, 241, 150]],
[[160, 111, 61, 180], [217, 66, 42, 246], [58, 228, 51, 85], [243, 120, 120, 190]],
[[161, 73, 255, 137], [214, 97, 218, 215], [153, 84, 137, 104], [65, 133, 185, 207]],
[[162, 106, 51, 126], [92, 115, 74, 221], [144, 39, 127, 141], [211, 157, 155, 254]],
[[163, 105, 92, 23], [155, 163, 195, 234], [77, 82, 169, 159], [64, 129, 64, 170]],
[[164, 233, 100, 63], [252, 72, 139, 64], [213, 106, 91, 102], [218, 51, 191, 68]],
[[165, 103, 90, 27], [250, 38, 181, 130], [161, 225, 183, 40], [234, 148, 55, 26]],
[[166, 1, 199, 114], [44, 184, 26, 84], [51, 225, 34, 243], [117, 251, 115, 93]],
[[167, 94, 18, 254], [147, 117, 224, 158], [213, 142, 56, 237], [32, 64, 165, 92]],
[[168, 246, 153, 78], [131, 93, 17, 28], [181, 42, 189, 31], [216, 127, 197, 46]],
[[169, 115, 147, 24], [206, 9, 177, 94], [86, 166, 132, 47], [80, 183, 145, 130]],
[[170, 33, 30, 5], [104, 237, 134, 177], [250, 181, 244, 83], [143, 194, 159, 23]],
[[171, 51, 71, 2], [93, 85, 66, 47], [189, 192, 163, 102], [72, 205, 176, 230]],
[[172, 17, 214, 168], [3, 237, 237, 166], [121, 118, 206, 201], [0, 86, 19, 146]],
[[173, 33, 194, 167], [141, 71, 68, 125], [52, 25, 190, 130], [16, 7, 172, 208]],
[[174, 33, 35, 169], [36, 128, 51, 53], [146, 67, 4, 181], [119, 161, 1, 187]],
[[175, 176, 87, 3], [136, 9, 73, 107], [207, 248, 109, 111], [188, 140, 229, 177]],
[[176, 53, 160, 107], [22, 96, 84, 242], [213, 101, 190, 138], [206, 117, 220, 133]],
[[177, 30, 11, 205], [216, 240, 113, 65], [196, 149, 135, 47], [181, 216, 192, 198]],
[[178, 106, 139, 109], [165, 86, 102, 62], [78, 70, 18, 5], [216, 69, 128, 190]],
[[179, 229, 188, 127], [205, 212, 222, 142], [134, 56, 67, 238], [242, 136, 211, 252]],
[[180, 208, 24, 230], [190, 219, 71, 170], [188, 75, 250, 196], [17, 158, 74, 58]],
[[181, 193, 152, 122], [144, 77, 137, 44], [49, 133, 206, 212], [17, 158, 154, 108]],
[[182, 145, 132, 247], [106, 163, 113, 7], [239, 46, 191, 144], [65, 180, 251, 183]],
[[183, 123, 50, 58], [12, 131, 71, 176], [199, 61, 153, 126], [81, 254, 117, 204]],
[[184, 7, 68, 181], [24, 58, 164, 231], [205, 122, 3, 171], [24, 20, 9, 93]],
[[185, 247, 217, 211], [244, 147, 33, 232], [42, 207, 16, 111], [222, 33, 24, 159]],
[[186, 182, 161, 191], [118, 8, 95, 163], [174, 251, 250, 187], [237, 233, 110, 223]],
[[187, 60, 8, 46], [139, 186, 74, 115], [224, 145, 129, 211], [235, 42, 199, 21]],
[[188, 42, 157, 29], [68, 76, 108, 82], [2, 57, 112, 39], [31, 82, 19, 176]],
[[189, 106, 250, 192], [253, 199, 85, 152], [250, 130, 79, 103], [148, 227, 225, 214]],
[[190, 29, 3, 144], [226, 242, 221, 54], [140, 91, 168, 4], [210, 178, 101, 200]],
[[191, 223, 200, 180], [108, 127, 132, 235], [191, 213, 205, 105], [121, 80, 170, 40]],
[[192, 121, 219, 168], [146, 80, 84, 125], [150, 3, 64, 234], [250, 13, 189, 230]],
[[193, 243, 164, 183], [248, 243, 61, 95], [229, 194, 82, 217], [139, 208, 99, 53]],
[[194, 13, 202, 59], [161, 48, 107, 116], [221, 5, 149, 61], [239, 201, 160, 91]],
[[195, 23, 9, 242], [110, 5, 9, 207], [118, 74, 103, 115], [149, 13, 252, 94]],
[[196, 23, 255, 3], [240, 175, 145, 125], [53, 3, 100, 212], [2, 107, 0, 190]],
[[197, 65, 246, 202], [100, 137, 175, 48], [196, 242, 30, 39], [83, 39, 17, 215]],
[[198, 231, 188, 156], [148, 213, 194, 94], [17, 86, 153, 6], [208, 48, 6, 22]],
[[199, 221, 146, 133], [231, 188, 63, 225], [237, 160, 238, 1], [61, 222, 241, 5]],
[[200, 76, 160, 22], [146, 250, 222, 203], [105, 207, 138, 133], [63, 132, 11, 98]],
[[201, 201, 197, 237], [13, 22, 53, 215], [226, 33, 179, 189], [82, 167, 220, 86]],
[[202, 137, 54, 208], [209, 79, 135, 57], [196, 44, 13, 138], [101, 208, 206, 133]],
[[203, 252, 177, 114], [0, 152, 246, 153], [232, 1, 148, 114], [134, 239, 183, 138]],
[[204, 1, 121, 99], [225, 37, 208, 91], [67, 98, 45, 66], [213, 24, 8, 0]],
[[205, 239, 18, 139], [103, 41, 80, 70], [23, 185, 9, 36], [158, 252, 240, 158]],
[[206, 228, 82, 183], [46, 199, 47, 209], [7, 2, 111, 125], [3, 83, 234, 0]],
[[207, 221, 221, 73], [49, 160, 203, 24], [59, 95, 54, 28], [159, 39, 72, 230]],
[[208, 120, 50, 162], [168, 3, 93, 252], [72, 94, 220, 11], [179, 144, 45, 168]],
[[209, 116, 202, 74], [46, 133, 237, 35], [36, 100, 75, 75], [28, 106, 178, 242]],
[[210, 218, 89, 167], [19, 185, 52, 239], [238, 75, 83, 84], [185, 64, 182, 165]],
[[211, 147, 137, 154], [255, 185, 189, 74], [75, 252, 187, 56], [8, 115, 145, 76]],
[[212, 75, 109, 156], [124, 3, 169, 241], [157, 130, 202, 252], [120, 57, 5, 103]],
[[213, 33, 195, 29], [61, 132, 38, 145], [80, 65, 85, 20], [216, 186, 249, 61]],
[[214, 92, 105, 112], [128, 214, 120, 22], [93, 18, 139, 196], [215, 87, 225, 151]],
[[215, 40, 73, 155], [243, 179, 14, 91], [199, 58, 176, 17], [18, 81, 194, 18]],
[[216, 166, 18, 71], [107, 44, 19, 207], [116, 104, 149, 227], [168, 190, 254, 163]],
[[217, 179, 245, 138], [174, 205, 60, 61], [66, 71, 106, 28], [165, 99, 138, 156]],
[[218, 195, 105, 151], [91, 24, 247, 132], [14, 208, 153, 127], [186, 45, 153, 119]],
[[219, 40, 42, 25], [220, 147, 94, 94], [166, 163, 34, 111], [152, 159, 246, 223]],
[[220, 198, 222, 33], [231, 85, 126, 152], [184, 130, 89, 33], [14, 229, 53, 184]],
[[221, 9, 247, 59], [50, 57, 211, 171], [32, 247, 57, 205], [246, 252, 216, 43]],
[[222, 109, 44, 205], [253, 37, 179, 103], [229, 143, 83, 45], [220, 10, 252, 34]],
[[223, 108, 76, 158], [71, 33, 4, 59], [98, 58, 189, 64], [254, 163, 6, 21]],
[[224, 179, 40, 208], [243, 167, 227, 23], [246, 85, 246, 197], [115, 141, 128, 211]],
[[225, 139, 188, 201], [177, 0, 110, 192], [232, 72, 17, 168], [254, 224, 252, 14]],
[[226, 153, 227, 176], [254, 232, 219, 93], [118, 63, 215, 168], [27, 1, 190, 171]],
[[227, 43, 195, 226], [61, 179, 174, 216], [116, 2, 37, 136], [105, 93, 168, 128]],
[[228, 59, 244, 249], [142, 87, 21, 125], [141, 246, 160, 228], [127, 231, 187, 13]],
[[229, 220, 142, 198], [35, 42, 45, 146], [13, 206, 98, 205], [5, 34, 241, 193]],
[[230, 134, 199, 196], [63, 108, 61, 48], [213, 87, 176, 122], [71, 80, 21, 154]],
[[231, 61, 175, 118], [62, 58, 59, 138], [18, 205, 148, 137], [63, 11, 206, 62]],
[[232, 49, 60, 95], [94, 158, 213, 59], [24, 196, 167, 61], [237, 242, 85, 201]],
[[233, 194, 73, 11], [176, 52, 196, 109], [83, 43, 118, 206], [12, 178, 19, 163]],
[[234, 201, 6, 178], [55, 250, 236, 209], [160, 174, 72, 154], [241, 248, 236, 101]],
[[235, 177, 152, 174], [125, 140, 215, 189], [39, 73, 179, 53], [224, 252, 60, 240]],
[[236, 231, 125, 62], [160, 251, 24, 32], [26, 102, 134, 12], [245, 58, 28, 81]],
[[237, 84, 219, 67], [5, 0, 189, 40], [238, 186, 111, 181], [163, 207, 217, 191]],
[[238, 238, 236, 194], [129, 117, 52, 149], [73, 153, 144, 100], [113, 159, 70, 45]],
[[239, 145, 13, 206], [92, 243, 87, 225], [146, 71, 187, 210], [165, 152, 106, 33]],
[[240, 232, 127, 232], [78, 172, 151, 181], [235, 6, 48, 45], [245, 211, 72, 173]],
[[241, 100, 250, 183], [247, 1, 241, 169], [216, 120, 131, 81], [8, 174, 208, 220]],
[[242, 81, 84, 149], [164, 243, 189, 173], [167, 72, 236, 216], [55, 164, 242, 188]],
[[243, 243, 127, 119], [41, 245, 214, 150], [161, 77, 206, 238], [24, 174, 155, 245]],
[[244, 248, 104, 160], [144, 104, 150, 215], [225, 206, 153, 116], [96, 146, 197, 197]],
[[245, 46, 38, 89], [93, 166, 67, 181], [113, 52, 117, 199], [130, 106, 217, 199]],
[[246, 60, 80, 37], [36, 159, 252, 234], [190, 92, 99, 22], [85, 130, 111, 189]],
[[247, 65, 89, 82], [25, 100, 142, 25], [207, 94, 145, 132], [115, 255, 60, 21]],
[[248, 79, 2, 181], [103, 96, 248, 149], [193, 162, 130, 74], [235, 142, 195, 186]],
[[249, 64, 224, 21], [40, 5, 157, 251], [92, 249, 85, 88], [254, 45, 165, 222]],
[[250, 68, 22, 1], [200, 205, 225, 176], [204, 204, 6, 24], [75, 104, 32, 60]],
[[251, 204, 99, 252], [131, 168, 250, 240], [187, 6, 13, 110], [93, 10, 128, 216]],
[[252, 19, 74, 225], [150, 119, 130, 75], [103, 30, 136, 138], [244, 213, 130, 127]],
[[253, 171, 42, 86], [198, 202, 47, 98], [151, 186, 122, 110], [234, 159, 112, 222]],
[[254, 223, 45, 196], [44, 92, 189, 58], [150, 248, 160, 177], [20, 24, 179, 96]],
[[255, 141, 87, 51], [96, 74, 44, 211], [106, 171, 199, 12], [227, 25, 59, 181]]]
key="202100460001"
print(plain_text[1])
'''
time_start = time.time()
for i in range(256):
    plaintext = plain_text[i]
    ciphertext=encrypt(plaintext, key)
time_end = time.time()
run_time = time_end - time_start
print(run_time)

